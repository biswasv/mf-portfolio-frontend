import React, { useEffect, useMemo, useState } from "react";
import axios from "axios";
import { LineChart, Line, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer, CartesianGrid } from "recharts";

/**
 * React (Vite + TS) frontend with basic JWT auth
 * - Login hits /auth/login → stores token
 * - Axios sends Authorization: Bearer <token>
 * - UI gates API buttons until logged in (when AUTH_REQUIRED=true on backend)
 */

const BACKEND_URL = import.meta.env.VITE_BACKEND_URL || "http://localhost:8000";

const brokers = ["All", "Fliber RIA", "Fliber MFD", "Others"] as const;

type Broker = typeof brokers[number];

type XirrPoint = { date: string; XIRR: number | null };

type XirrReport = {
  xirr_timeline: XirrPoint[];
  xirr_scheme_map: Record<string, XirrPoint[]>;
  summary_isin: any[];
  summary_scheme: any[];
  summary_scheme_folio: any[];
};

type PortfolioMetricsSummary = { [k: string]: any };

type PortfolioMetricsResp = {
  summary: PortfolioMetricsSummary;
  journey_portfolio: { date: string; value: number }[];
  journey_benchmark: { date: string; value: number }[];
};

type LoginResp = { access_token: string; token_type: string };

function useApi(token: string | null) {
  const api = useMemo(() => {
    const inst = axios.create({ baseURL: BACKEND_URL, timeout: 120000 });
    // attach token if present
    inst.interceptors.request.use((config) => {
      const t = token || localStorage.getItem("mf_token");
      if (t) config.headers["Authorization"] = `Bearer ${t}`;
      return config;
    });
    return inst;
  }, [token]);

  return {
    async login(username: string, password: string) {
      const { data } = await api.post<LoginResp>("/auth/login", { username, password });
      return data;
    },
    async fetchBase(pan: string, broker: Broker) {
      const { data } = await api.post("/fetch", { pan, broker });
      return data as {
        investor_name: string;
        transactions: any[];
        positions: any[];
        investment_start_dates: any[];
        unique_isins: string[];
      };
    },
    async xirrReport(pan: string, broker: Broker) {
      const { data } = await api.post("/xirr-report", { pan, broker });
      return data as XirrReport;
    },
    async fundAnalysis(isins: string[]) {
      const { data } = await api.post("/fund-analysis", { isins });
      return data as any[];
    },
    async portfolioMetrics(
      pan: string,
      broker: Broker,
      opts: { rf_percent: number; benchmark_symbol: string; lookback_years: number; enforce_full: boolean }
    ) {
      const { data } = await api.post("/portfolio-metrics", {
        pan,
        broker,
        rf_percent: opts.rf_percent,
        benchmark_symbol: opts.benchmark_symbol,
        lookback_years: opts.lookback_years,
        enforce_full: opts.enforce_full,
      });
      return data as PortfolioMetricsResp;
    },
    async exportExcel(pan: string, broker: Broker) {
      const { data } = await api.post(
        "/export",
        { pan, broker, kind: "excel" },
        { responseType: "blob" }
      );
      return data as Blob;
    },
    async exportHtml(pan: string, broker: Broker) {
      const { data } = await api.post(
        "/export",
        { pan, broker, kind: "html" },
        { responseType: "blob" }
      );
      return data as Blob;
    },
  };
}

function SectionCard({ title, children }: { title: string; children: React.ReactNode }) {
  return (
    <div className="rounded-2xl shadow p-5 border border-gray-200 bg-white">
      <div className="text-lg font-semibold mb-3">{title}</div>
      {children}
    </div>
  );
}

function Table({ rows, columns }: { rows: any[]; columns: string[] }) {
  if (!rows?.length) return <div className="text-sm text-gray-500">No data</div>;
  return (
    <div className="overflow-x-auto">
      <table className="min-w-full border-collapse">
        <thead>
          <tr>
            {columns.map((c) => (
              <th key={c} className="border px-3 py-2 text-left bg-gray-50 sticky top-0">
                {c}
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          {rows.map((r, i) => (
            <tr key={i} className="odd:bg-gray-50/40">
              {columns.map((c) => (
                <td key={c} className="border px-3 py-2 align-top">
                  {String(r[c] ?? "")}
                </td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

function Login({ onLoggedIn }: { onLoggedIn: (token: string) => void }) {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState<string | null>(null);

  const api = useApi(null);

  async function handleLogin(e: React.FormEvent) {
    e.preventDefault();
    setError(null);
    try {
      const res = await api.login(username.trim(), password);
      localStorage.setItem("mf_token", res.access_token);
      onLoggedIn(res.access_token);
    } catch (err: any) {
      setError(err?.response?.data?.detail || "Login failed");
    }
  }

  return (
    <SectionCard title="Login">
      <form className="grid grid-cols-1 md:grid-cols-3 gap-3 items-end" onSubmit={handleLogin}>
        <div>
          <label className="block text-sm mb-1">Username</label>
          <input className="w-full border rounded px-3 py-2" value={username} onChange={(e) => setUsername(e.target.value)} />
        </div>
        <div>
          <label className="block text-sm mb-1">Password</label>
          <input type="password" className="w-full border rounded px-3 py-2" value={password} onChange={(e) => setPassword(e.target.value)} />
        </div>
        <button className="h-[42px] px-4 rounded bg-black text-white">Sign in</button>
      </form>
      {error && <div className="mt-3 text-sm text-red-600">{error}</div>}
      <div className="text-xs text-gray-500 mt-2">Backend URL: {BACKEND_URL}</div>
    </SectionCard>
  );
}

export default function App() {
  const [token, setToken] = useState<string | null>(null);

  useEffect(() => {
    const t = localStorage.getItem("mf_token");
    if (t) setToken(t);
  }, []);

  const api = useApi(token);

  const [pan, setPan] = useState("");
  const [broker, setBroker] = useState<Broker>("All");
  const [loading, setLoading] = useState<string | null>(null);

  const [investorName, setInvestorName] = useState<string>("");
  const [base, setBase] = useState<{ transactions: any[]; positions: any[]; unique_isins: string[] } | null>(null);

  const [xirr, setXirr] = useState<XirrReport | null>(null);
  const [fundRows, setFundRows] = useState<any[] | null>(null);

  const [rf, setRf] = useState(5.0);
  const [bm, setBm] = useState("^NSEI");
  const [lookback, setLookback] = useState(1);
  const [enforceFull, setEnforceFull] = useState(false);
  const [pm, setPm] = useState<PortfolioMetricsResp | null>(null);

  async function handleFetch() {
    if (!pan) return alert("Enter PAN");
    setLoading("Fetching portfolio...");
    try {
      const res = await api.fetchBase(pan.trim(), broker);
      setInvestorName(res.investor_name);
      setBase({ transactions: res.transactions, positions: res.positions, unique_isins: res.unique_isins });
    } catch (e: any) {
      alert(e?.response?.data?.detail || e.message);
    } finally {
      setLoading(null);
    }
  }

  async function handleXirr() {
    if (!pan) return alert("Enter PAN");
    setLoading("Computing XIRR report...");
    try {
      const res = await api.xirrReport(pan.trim(), broker);
      setXirr(res);
    } catch (e: any) {
      alert(e?.response?.data?.detail || e.message);
    } finally {
      setLoading(null);
    }
  }

  async function handleFund() {
    if (!base?.unique_isins?.length) return alert("Run Fetch first");
    setLoading("Fetching fund analysis...");
    try {
      const res = await api.fundAnalysis(base.unique_isins);
      setFundRows(res);
    } catch (e: any) {
      alert(e?.response?.data?.detail || e.message);
    } finally {
      setLoading(null);
    }
  }

  async function handleMetrics() {
    if (!pan) return alert("Enter PAN");
    setLoading("Computing portfolio metrics...");
    try {
      const res = await api.portfolioMetrics(pan.trim(), broker, {
        rf_percent: rf,
        benchmark_symbol: bm,
        lookback_years: lookback,
        enforce_full: enforceFull,
      });
      setPm(res);
    } catch (e: any) {
      alert(e?.response?.data?.detail || e.message);
    } finally {
      setLoading(null);
    }
  }

  async function saveBlob(blob: Blob, filename: string) {
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url; a.download = filename; a.click();
    window.URL.revokeObjectURL(url);
  }

  async function handleExport(kind: "excel" | "html") {
    if (!pan) return alert("Enter PAN");
    setLoading(`Exporting ${kind.toUpperCase()}...`);
    try {
      const blob = kind === "excel" ? await api.exportExcel(pan.trim(), broker) : await api.exportHtml(pan.trim(), broker);
      await saveBlob(blob, kind === "excel" ? "XIRR_Fund_Analysis.xlsx" : "Fund_Analysis_Report.html");
    } catch (e: any) {
      alert(e?.response?.data?.detail || e.message);
    } finally {
      setLoading(null);
    }
  }

  const xirrChartData = useMemo(() => {
    if (!xirr?.xirr_timeline) return [];
    return xirr.xirr_timeline.map((p) => ({ date: p.date, xirr_pct: p.XIRR == null ? null : Number(p.XIRR) }));
  }, [xirr]);

  function logout() {
    localStorage.removeItem("mf_token");
    setToken(null);
  }

  return (
    <div className="min-h-screen bg-gray-100">
      <div className="max-w-6xl mx-auto p-6 space-y-6">
        <header className="flex items-center justify-between">
          <h1 className="text-2xl font-bold">MF Portfolio — Web App</h1>
          <div className="flex items-center gap-3 text-xs text-gray-500">
            <span>Backend: {BACKEND_URL}</span>
            {token ? (
              <button className="px-3 py-2 rounded bg-black text-white" onClick={logout}>Logout</button>
            ) : null}
          </div>
        </header>

        {!token && <Login onLoggedIn={setToken} />}

        <SectionCard title="Inputs">
          <form
            className="grid grid-cols-1 md:grid-cols-5 gap-3 items-end"
            onSubmit={(e) => { e.preventDefault(); handleFetch(); }}
          >
            <div className="col-span-2">
              <label className="block text-sm mb-1">PAN</label>
              <input className="w-full border rounded px-3 py-2" placeholder="ABCDE1234F" value={pan} onChange={(e) => setPan(e.target.value)} />
            </div>
            <div>
              <label className="block text-sm mb-1">Broker</label>
              <select className="w-full border rounded px-3 py-2" value={broker} onChange={(e) => setBroker(e.target.value as Broker)}>
                {brokers.map((b) => (<option key={b}>{b}</option>))}
              </select>
            </div>
            <button type="submit" className="h-[42px] px-4 rounded bg-black text-white">Fetch</button>
            <div className="text-sm text-gray-500">{investorName ? `Investor: ${investorName}` : ""}</div>
          </form>
          {loading && <div className="mt-3 text-sm">{loading}</div>}
        </SectionCard>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <SectionCard title="XIRR Report">
            <div className="flex gap-2 mb-3">
              <button className="px-3 py-2 rounded bg-blue-600 text-white" onClick={handleXirr} disabled={!token && false}>Run XIRR</button>
              <button className="px-3 py-2 rounded bg-purple-700 text-white" onClick={() => handleExport("excel")} disabled={!token && false}>Export Excel</button>
              <button className="px-3 py-2 rounded bg-purple-700 text-white" onClick={() => handleExport("html")} disabled={!token && false}>Export HTML</button>
            </div>
            <div className="h-72">
              <ResponsiveContainer width="100%" height="100%">
                <LineChart data={xirrChartData} margin={{ top: 10, right: 20, left: 0, bottom: 10 }}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="date" tick={{ fontSize: 12 }} />
                  <YAxis tickFormatter={(v) => `${v}%`} width={60} />
                  <Tooltip formatter={(v: any) => (v == null ? "" : `${v.toFixed(2)}%`)} />
                  <Legend />
                  <Line type="monotone" dataKey="xirr_pct" name="Portfolio XIRR (%)" dot={false} />
                </LineChart>
              </ResponsiveContainer>
            </div>
            <div className="mt-3">
              <Table rows={xirr?.summary_scheme || []} columns={(xirr?.summary_scheme?.[0] && Object.keys(xirr.summary_scheme[0])) || []} />
            </div>
          </SectionCard>

          <SectionCard title="Fund Analysis">
            <div className="flex gap-2 mb-3">
              <button className="px-3 py-2 rounded bg-emerald-600 text-white" onClick={handleFund} disabled={!token && false}>Run Fund Analysis</button>
            </div>
            <Table rows={fundRows || []} columns={(fundRows?.[0] && Object.keys(fundRows[0])) || []} />
          </SectionCard>
        </div>

        <SectionCard title="Portfolio Metrics vs Benchmark">
          <div className="grid grid-cols-1 md:grid-cols-6 gap-3 mb-3">
            <div>
              <label className="block text-sm mb-1">Risk-free (%)</label>
              <input type="number" className="w-full border rounded px-3 py-2" step="0.1" value={rf} onChange={(e) => setRf(parseFloat(e.target.value))} />
            </div>
            <div className="md:col-span-2">
              <label className="block text-sm mb-1">Benchmark (Yahoo symbol)</label>
              <input className="w-full border rounded px-3 py-2" value={bm} onChange={(e) => setBm(e.target.value)} />
              <div className="text-xs text-gray-500 mt-1">e.g., ^NSEI, ^BSESN, ^NSEBANK, ^NSEMDCP100</div>
            </div>
            <div>
              <label className="block text-sm mb-1">Lookback (years)</label>
              <select className="w-full border rounded px-3 py-2" value={lookback} onChange={(e) => setLookback(parseInt(e.target.value, 10))}>
                {[1,2,3,4,5].map((y) => (<option key={y} value={y}>{y}</option>))}
              </select>
            </div>
            <label className="flex items-center gap-2 text-sm">
              <input type="checkbox" checked={enforceFull} onChange={(e) => setEnforceFull(e.target.checked)} /> Enforce full window
            </label>
            <div>
              <button className="w-full h-[42px] px-3 rounded bg-purple-700 text-white" onClick={handleMetrics} disabled={!token && false}>Compute</button>
            </div>
          </div>

          {pm && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <div className="text-sm font-semibold mb-2">Summary</div>
                <Table rows={[pm.summary]} columns={Object.keys(pm.summary)} />
              </div>
              <div className="h-72">
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart
                    data={(pm.journey_portfolio || []).map((d, i) => ({
                      date: d.date,
                      portfolio: d.value,
                      benchmark: pm.journey_benchmark?.[i]?.value ?? null,
                    }))}
                    margin={{ top: 10, right: 20, left: 0, bottom: 10 }}
                  >
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="date" tick={{ fontSize: 12 }} />
                    <YAxis width={60} />
                    <Tooltip />
                    <Legend />
                    <Line type="monotone" dataKey="portfolio" name="Portfolio (×)" dot={false} />
                    <Line type="monotone" dataKey="benchmark" name="Benchmark (×)" dot={false} />
                  </LineChart>
                </ResponsiveContainer>
              </div>
            </div>
          )}
        </SectionCard>

        <footer className="text-xs text-gray-500 text-center py-6">© {new Date().getFullYear()} Fliber — Demo UI</footer>
      </div>
    </div>
  );
}

